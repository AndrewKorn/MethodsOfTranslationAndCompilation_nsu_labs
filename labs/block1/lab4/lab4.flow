import runtime;
import string;
import ds/tree;

inds(arr : [int], m : int) -> [Pair<int,int>] {
	foldi(arr, [], 
		\i, res1, v1 -> 
			foldi(arr, res1, 
				\j, res2, v2 -> 
					if (v1 + v2 == m) concat(res2, [Pair(i, j)]) else res2
			)
    	);
}


inds2(arr : [int], m : int) -> [Pair<int, int>] {
	tree = foldi(arr, makeTree(), 
		\i, t, v -> setTree(t, m - v, arrayPush(getTreeArrayValue(t,m - v), i))		
	);
	foldi(arr, [],
		\i, res, v -> 
			switch (lookupTree(tree, v)) {
            			Some(idx): concat(res, map(idx, \j -> Pair(i, j)));
            			None(): res;
			}
	);
}

main() {
	arr = [1, 2, 3, 3];
	m = 4;
	println(inds(arr, m));
	println(inds2(arr, m));
}
