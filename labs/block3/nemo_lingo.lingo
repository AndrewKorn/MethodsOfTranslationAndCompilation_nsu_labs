prog = varDecl*:d ws body:b { NemoProg(:d, :b) };

varDecl = ws "VAR" ws char+$n ws ":" ws type:t ws ";" ws { VarDecl($n, :t) };

type  = int | array;
int   =  ws "INT" ws                { bType("INT") };
array =  ws "[" ws type:t ws "]" ws { aType(:t) };

body = assign | print | iter | test | choice | seq | ifElse | while;
assign = ws variable:v ws ":=" ws exp:e                                                          { Assign(:v, :e) };
print = ws "PRINT(" exp:e ")" ws                                                                 { Print(:e) };
iter = ws "(" ws body:op ws ")*" ws                                                              { Iter(:op) };
test = ws "(" ws exp:e1 ws comparisonOp$op ws exp:e2 ws ")?" ws                                  { Test($op, :e1, :e2) };
choice = ws "(" body:b choiceOp*:o ")" ws                                                        { BuildChoice(:b, :o) };
seq = ws "(" body:b seqOp*:o ")" ws                                                              { BuildSeq(:b, :o) };
ifElse = ws "IF" ws exp:e1 comparisonOp$op exp:e2 ws "THEN" ws body:if ws "ELSE" ws body:else ws { BuildIfElse($op, :e1, :e2, :if, :else) };
while = ws "WHILE" ws exp:e1 comparisonOp$op exp:e2 ws "DO" ws body:b ws                         { BuildWhile($op, :e1, :e2, :b)};

exp = binaryOperator | const | app | upd | variable;
binaryOperator = ws "(" exp:e1 binaryOp$op exp:e2 ")" ws                       { BinaryOp($op, :e1, :e2) };
const = ws digit+$d ws                                                         { Const(s2i($d)) };
app  = ws "(" ws "APP" ws "(" exp:array "," exp:index ")" ws ")" ws            { App(:array, :index) };
upd = ws "(" ws "UPD" ws "(" exp:array "," exp:index "," exp:val ")" ws ")" ws { Upd(:array, :index, :val) };
variable = ws char+$v ws                                                       { Var($v) };

comparisonOp = ("==" | "<=" | ">=" | "<" | ">" | "!=");
binaryOp = ("+" | "*" | "/" | "-" | "%");
choiceOp =  ws "U" body;
seqOp = ws ";" body;

char = 'a'-'z';
digit = '0'-'9';
ws = (' ' | '\t' | '\n' | '\r')*;